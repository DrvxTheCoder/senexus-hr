'use client';

import { useEffect, useState } from 'react';
import { useParams } from 'next/navigation';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Plus, Search, AlertTriangle, CheckCircle2, XCircle } from 'lucide-react';
import { getEmployees } from '../actions/employee-actions';
import { formatDateFR, formatDuration } from '../utils/date-utils';
import { toast } from 'sonner';

type Employee = any;

export default function EmployeesPage() {
  const params = useParams();
  const firmSlug = params.firmSlug as string;

  const [employees, setEmployees] = useState<Employee[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [statusFilter, setStatusFilter] = useState<string>('all');

  useEffect(() => {
    fetchEmployees();
  }, [statusFilter]);

  async function fetchEmployees() {
    setLoading(true);
    try {
      // Get firmId from session/context - placeholder for now
      const firmId = 'temp-firm-id'; // TODO: Get from session

      const result = await getEmployees(firmId, {
        status: statusFilter === 'all' ? undefined : statusFilter,
        search: searchQuery,
      });

      if (result.success) {
        setEmployees(result.data || []);
      } else {
        toast.error(result.error || 'Erreur lors du chargement');
      }
    } catch (error) {
      toast.error('Erreur lors du chargement');
    } finally {
      setLoading(false);
    }
  }

  const filteredEmployees = employees.filter((emp) => {
    return (
      searchQuery === '' ||
      `${emp.firstName} ${emp.lastName}`.toLowerCase().includes(searchQuery.toLowerCase()) ||
      emp.matricule.toLowerCase().includes(searchQuery.toLowerCase())
    );
  });

  const stats = {
    total: employees.length,
    active: employees.filter((e) => e.status === 'ACTIVE').length,
    onLeave: employees.filter((e) => e.status === 'ON_LEAVE').length,
    inactive: employees.filter((e) => ['INACTIVE', 'TERMINATED'].includes(e.status)).length,
  };

  const getStatusBadge = (status: string) => {
    const config: Record<string, { label: string; variant: any; icon: any }> = {
      ACTIVE: { label: 'Actif', variant: 'default', icon: CheckCircle2 },
      INACTIVE: { label: 'Inactif', variant: 'secondary', icon: XCircle },
      ON_LEAVE: { label: 'En congé', variant: 'outline', icon: AlertTriangle },
      SUSPENDED: { label: 'Suspendu', variant: 'destructive', icon: XCircle },
      TERMINATED: { label: 'Terminé', variant: 'destructive', icon: XCircle },
    };

    const { label, variant, icon: Icon } = config[status] || config.ACTIVE;

    return (
      <Badge variant={variant} className='flex items-center gap-1'>
        <Icon className='h-3 w-3' />
        {label}
      </Badge>
    );
  };

  return (
    <div className='flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-8'>
      <div className='flex items-center justify-between'>
        <div>
          <h1 className='text-3xl font-bold tracking-tight'>Employés</h1>
          <p className='text-muted-foreground mt-1'>
            Gérer tous les employés intérimaires
          </p>
        </div>
        <Button>
          <Plus className='mr-2 h-4 w-4' />
          Ajouter un employé
        </Button>
      </div>

      <div className='grid gap-4 md:grid-cols-4'>
        <Card>
          <CardHeader className='pb-2'>
            <CardTitle className='text-sm font-medium'>Total</CardTitle>
          </CardHeader>
          <CardContent>
            <div className='text-2xl font-bold'>{stats.total}</div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className='pb-2'>
            <CardTitle className='text-sm font-medium'>Actifs</CardTitle>
          </CardHeader>
          <CardContent>
            <div className='text-2xl font-bold text-green-600'>{stats.active}</div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className='pb-2'>
            <CardTitle className='text-sm font-medium'>En congé</CardTitle>
          </CardHeader>
          <CardContent>
            <div className='text-2xl font-bold text-orange-600'>{stats.onLeave}</div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className='pb-2'>
            <CardTitle className='text-sm font-medium'>Inactifs</CardTitle>
          </CardHeader>
          <CardContent>
            <div className='text-2xl font-bold text-gray-600'>{stats.inactive}</div>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <div className='flex flex-col md:flex-row md:items-center md:justify-between gap-4'>
            <CardTitle>Liste des employés</CardTitle>
            <div className='flex items-center gap-2'>
              <div className='relative w-full md:w-[300px]'>
                <Search className='text-muted-foreground absolute top-2.5 left-2.5 h-4 w-4' />
                <Input
                  placeholder='Rechercher...'
                  className='pl-8'
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                />
              </div>
              <Select value={statusFilter} onValueChange={setStatusFilter}>
                <SelectTrigger className='w-[150px]'>
                  <SelectValue placeholder='Statut' />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value='all'>Tous</SelectItem>
                  <SelectItem value='ACTIVE'>Actif</SelectItem>
                  <SelectItem value='ON_LEAVE'>En congé</SelectItem>
                  <SelectItem value='INACTIVE'>Inactif</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          {loading ? (
            <div className='text-center py-8'>Chargement...</div>
          ) : (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Matricule</TableHead>
                  <TableHead>Nom</TableHead>
                  <TableHead>Département</TableHead>
                  <TableHead>Client</TableHead>
                  <TableHead>Statut</TableHead>
                  <TableHead>Embauche</TableHead>
                  <TableHead>Durée</TableHead>
                  <TableHead>Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredEmployees.map((emp) => {
                  const days = Math.floor(
                    (new Date().getTime() - new Date(emp.firstInterimDate).getTime()) /
                      (1000 * 60 * 60 * 24)
                  );
                  const remaining = Math.max(0, 730 - days);

                  return (
                    <TableRow key={emp.id}>
                      <TableCell className='font-mono'>{emp.matricule}</TableCell>
                      <TableCell>
                        {emp.firstName} {emp.lastName}
                      </TableCell>
                      <TableCell>{emp.department?.name || '-'}</TableCell>
                      <TableCell>{emp.assignedClient?.name || '-'}</TableCell>
                      <TableCell>{getStatusBadge(emp.status)}</TableCell>
                      <TableCell>{formatDateFR(emp.hireDate)}</TableCell>
                      <TableCell>
                        <div className='flex items-center gap-2'>
                          <span className='text-sm'>{formatDuration(days)}</span>
                          {remaining === 0 && (
                            <Badge variant='destructive' className='text-xs'>
                              <AlertTriangle className='h-3 w-3 mr-1' />
                              Limite
                            </Badge>
                          )}
                          {remaining <= 90 && remaining > 0 && (
                            <Badge variant='warning' className='text-xs'>
                              {remaining}j
                            </Badge>
                          )}
                        </div>
                      </TableCell>
                      <TableCell>
                        <Button variant='ghost' size='sm'>
                          Voir
                        </Button>
                      </TableCell>
                    </TableRow>
                  );
                })}
              </TableBody>
            </Table>
          )}
          {filteredEmployees.length === 0 && !loading && (
            <div className='py-12 text-center text-muted-foreground'>
              Aucun employé trouvé
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
