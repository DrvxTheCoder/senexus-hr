// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// NEXTAUTH MODELS
// ============================================================================

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts              Account[]
  sessions              Session[]
  userFirms             UserFirm[]
  employees             Employee[]
  dashboards            DashboardView[]
  auditLogs             AuditLog[]
  uploadedFiles         FileObject[]
  reviewedLeaves        LeaveRequest[]
  recordedAbsences      Absence[]
  approvedMissions      Mission[]
  approvedPayslips      Payslip[]
  generatedReports      ClientQuarterlyReport[]
  requestedTransfers    EmployeeTransfer[]           @relation("TransferRequester")
  approvedTransfers     EmployeeTransfer[]           @relation("TransferApprover")

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

// ============================================================================
// MULTI-TENANCY MODELS
// ============================================================================

enum FirmRole {
  OWNER
  ADMIN
  MANAGER
  STAFF
  VIEWER
}

model Holding {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  firms Firm[]

  @@map("holdings")
}

model Firm {
  id          String   @id @default(cuid())
  holdingId   String
  name        String
  slug        String   @unique
  logo        String?
  themeColor  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  holding                Holding                       @relation(fields: [holdingId], references: [id], onDelete: Cascade)
  userFirms              UserFirm[]
  firmModules            FirmModule[]
  departments            Department[]
  employees              Employee[]
  contracts              Contract[]
  leaveRequests          LeaveRequest[]
  missions               Mission[]
  clients                Client[]
  clientAssignments      ClientFirmAssignment[]
  clientReports          ClientQuarterlyReport[]
  partners               Partner[]
  partnerAgreements      PartnerAgreement[]
  benefitPlans           BenefitPlan[]
  contributions          Contribution[]
  claims                 Claim[]
  files                  FileObject[]
  dashboards             DashboardView[]
  auditLogs              AuditLog[]
  transfersOut           EmployeeTransfer[]            @relation("TransfersOut")
  transfersIn            EmployeeTransfer[]            @relation("TransfersIn")
  payrollConfig          PayrollConfig?
  payslips               Payslip[]

  @@map("firms")
}

model UserFirm {
  id        String   @id @default(cuid())
  userId    String
  firmId    String
  role      FirmRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  firm Firm @relation(fields: [firmId], references: [id], onDelete: Cascade)

  @@unique([userId, firmId])
  @@map("user_firms")
}

// ============================================================================
// MODULE SYSTEM MODELS
// ============================================================================

model Module {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  description String?
  version     String
  icon        String?
  basePath    String
  isSystem    Boolean  @default(false)
  isActive    Boolean  @default(true)
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  firmModules       FirmModule[]
  dependencies      ModuleDependency[] @relation("ModuleDeps")
  requiredBy        ModuleDependency[] @relation("RequiredBy")

  @@map("modules")
}

model FirmModule {
  id          String   @id @default(cuid())
  firmId      String
  moduleId    String
  isEnabled   Boolean  @default(true)
  settings    Json?
  installedAt DateTime @default(now())
  installedBy String?

  firm   Firm   @relation(fields: [firmId], references: [id], onDelete: Cascade)
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([firmId, moduleId])
  @@map("firm_modules")
}

model ModuleDependency {
  id          String @id @default(cuid())
  moduleId    String
  dependsOnId String

  module    Module @relation("ModuleDeps", fields: [moduleId], references: [id], onDelete: Cascade)
  dependsOn Module @relation("RequiredBy", fields: [dependsOnId], references: [id], onDelete: Cascade)

  @@unique([moduleId, dependsOnId])
  @@map("module_dependencies")
}

// ============================================================================
// HR MODULE - ENHANCED
// ============================================================================

model Department {
  id        String   @id @default(cuid())
  firmId    String
  name      String
  code      String
  managerId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firm      Firm       @relation(fields: [firmId], references: [id], onDelete: Cascade)
  manager   Employee?  @relation("DepartmentManager", fields: [managerId], references: [id])
  employees Employee[] @relation("DepartmentEmployees")

  @@unique([firmId, code])
  @@map("departments")
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  TERMINATED
  ON_LEAVE
}

model Employee {
  id                  String         @id @default(cuid())
  firmId              String
  userId              String?
  firstName           String
  lastName            String
  matricule           String
  departmentId        String?
  assignedClientId    String?
  assignmentStartDate DateTime?
  status              EmployeeStatus @default(ACTIVE)
  hireDate            DateTime
  firstInterimDate    DateTime
  phone               String?
  email               String?
  address             String?
  emergencyContact    Json?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  firm                    Firm                           @relation(fields: [firmId], references: [id], onDelete: Cascade)
  user                    User?                          @relation(fields: [userId], references: [id])
  department              Department?                    @relation("DepartmentEmployees", fields: [departmentId], references: [id])
  assignedClient          Client?                        @relation(fields: [assignedClientId], references: [id])
  managedDepartment       Department?                    @relation("DepartmentManager")
  contracts               Contract[]
  leaveRequests           LeaveRequest[]
  leaveBalances           LeaveBalance[]
  absences                Absence[]
  requestedMissions       Mission[]
  transfersOut            EmployeeTransfer[]             @relation("TransferFrom")
  transfersIn             EmployeeTransfer[]             @relation("TransferTo")
  salaries                EmployeeSalary[]
  payslips                Payslip[]
  coverageEnrollments     EmployeeCoverageEnrollment[]
  contributions           Contribution[]
  claims                  Claim[]

  @@unique([firmId, matricule])
  @@map("employees")
}

enum ContractType {
  CDI
  CDD
  INTERIM
  STAGE
  PRESTATION
}

model Contract {
  id                String       @id @default(cuid())
  firmId            String
  employeeId        String
  clientId          String?
  type              ContractType
  startDate         DateTime
  endDate           DateTime?
  renewalDate       DateTime?
  alertThreshold    Int          @default(30)
  isAutoRenewal     Boolean      @default(false)
  position          String?
  salary            Decimal?     @db.Decimal(10, 2)
  workingHours      Int?
  trialPeriodEnd    DateTime?
  notes             String?
  isActive          Boolean      @default(true)
  terminationDate   DateTime?
  terminationReason String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  firm     Firm      @relation(fields: [firmId], references: [id], onDelete: Cascade)
  employee Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  client   Client?   @relation(fields: [clientId], references: [id])

  @@map("contracts")
}

enum TransferStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

model EmployeeTransfer {
  id                String         @id @default(cuid())
  employeeId        String
  fromFirmId        String
  toFirmId          String
  clientId          String?
  transferDate      DateTime
  effectiveDate     DateTime
  reason            String
  status            TransferStatus @default(PENDING)
  requestedBy       String
  approvedBy        String?
  approvedAt        DateTime?
  rejectionReason   String?
  notes             String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  employee   Employee @relation("TransferFrom", fields: [employeeId], references: [id])
  fromFirm   Firm     @relation("TransfersOut", fields: [fromFirmId], references: [id])
  toFirm     Firm     @relation("TransfersIn", fields: [toFirmId], references: [id])
  client     Client?  @relation(fields: [clientId], references: [id])
  requester  User     @relation("TransferRequester", fields: [requestedBy], references: [id])
  approver   User?    @relation("TransferApprover", fields: [approvedBy], references: [id])

  @@map("employee_transfers")
}

enum LeaveType {
  ANNUAL
  SICK
  MATERNITY
  PATERNITY
  UNPAID
  SPECIAL
  COMPENSATORY
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

model LeaveRequest {
  id              String      @id @default(cuid())
  firmId          String
  employeeId      String
  leaveType       LeaveType
  startDate       DateTime
  endDate         DateTime
  totalDays       Decimal     @db.Decimal(5, 2)
  isPaid          Boolean     @default(true)
  status          LeaveStatus @default(PENDING)
  reason          String?
  isJustified     Boolean     @default(false)
  justification   String?
  supportingDoc   String?
  requestedAt     DateTime    @default(now())
  reviewedBy      String?
  reviewedAt      DateTime?
  rejectionReason String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  firm      Firm      @relation(fields: [firmId], references: [id], onDelete: Cascade)
  employee  Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  reviewer  User?     @relation(fields: [reviewedBy], references: [id])

  @@map("leave_requests")
}

model LeaveBalance {
  id            String    @id @default(cuid())
  employeeId    String
  year          Int
  leaveType     LeaveType
  totalDays     Decimal   @db.Decimal(5, 2)
  usedDays      Decimal   @db.Decimal(5, 2) @default(0)
  remainingDays Decimal   @db.Decimal(5, 2)
  carriedOver   Decimal   @db.Decimal(5, 2) @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, year, leaveType])
  @@map("leave_balances")
}

enum AbsenceType {
  UNJUSTIFIED
  JUSTIFIED
  LATE_ARRIVAL
  EARLY_DEPARTURE
}

model Absence {
  id            String      @id @default(cuid())
  employeeId    String
  firmId        String
  absenceType   AbsenceType
  date          DateTime
  startTime     DateTime?
  endTime       DateTime?
  hours         Decimal?    @db.Decimal(5, 2)
  isJustified   Boolean     @default(false)
  justification String?
  supportingDoc String?
  recordedBy    String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  recorder User     @relation(fields: [recordedBy], references: [id])

  @@map("absences")
}

enum MissionStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Mission {
  id              String        @id @default(cuid())
  firmId          String
  requesterId     String
  title           String
  destination     String
  startDate       DateTime
  endDate         DateTime
  status          MissionStatus @default(DRAFT)
  purpose         String?
  budgetAmount    Decimal?      @db.Decimal(10, 2)
  actualAmount    Decimal?      @db.Decimal(10, 2)
  missionFees     Decimal?      @db.Decimal(10, 2)
  approvedBy      String?
  approvedAt      DateTime?
  rejectionReason String?
  completedAt     DateTime?
  report          String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  firm      Firm             @relation(fields: [firmId], references: [id], onDelete: Cascade)
  requester Employee         @relation(fields: [requesterId], references: [id], onDelete: Cascade)
  approver  User?            @relation(fields: [approvedBy], references: [id])
  expenses  MissionExpense[]

  @@map("missions")
}

enum ExpenseCategory {
  TRANSPORT
  ACCOMMODATION
  MEALS
  FUEL
  OTHER
}

model MissionExpense {
  id          String          @id @default(cuid())
  missionId   String
  category    ExpenseCategory
  amount      Decimal         @db.Decimal(10, 2)
  date        DateTime
  description String?
  receiptUrl  String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  mission Mission @relation(fields: [missionId], references: [id], onDelete: Cascade)

  @@map("mission_expenses")
}

// ============================================================================
// PAYROLL SYSTEM (BASIC IMPLEMENTATION)
// ============================================================================

model PayrollConfig {
  id        String   @id @default(cuid())
  firmId    String   @unique
  constants Json
  formulas  Json?
  currency  String   @default("XOF")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firm Firm @relation(fields: [firmId], references: [id], onDelete: Cascade)

  @@map("payroll_configs")
}

model EmployeeSalary {
  id            String   @id @default(cuid())
  employeeId    String
  baseSalary    Decimal  @db.Decimal(10, 2)
  variables     Json?
  effectiveDate DateTime
  endDate       DateTime?
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  employee Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  payslips Payslip[]

  @@map("employee_salaries")
}

enum PayslipStatus {
  DRAFT
  APPROVED
  PAID
  CANCELLED
}

model Payslip {
  id              String        @id @default(cuid())
  firmId          String
  employeeId      String
  salaryId        String
  period          String
  grossSalary     Decimal       @db.Decimal(10, 2)
  netSalary       Decimal       @db.Decimal(10, 2)
  deductions      Json
  additions       Json
  calculationData Json
  status          PayslipStatus @default(DRAFT)
  generatedAt     DateTime      @default(now())
  approvedBy      String?
  approvedAt      DateTime?
  paidAt          DateTime?
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  firm     Firm           @relation(fields: [firmId], references: [id], onDelete: Cascade)
  employee Employee       @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  salary   EmployeeSalary @relation(fields: [salaryId], references: [id], onDelete: Cascade)
  approver User?          @relation(fields: [approvedBy], references: [id])

  @@unique([employeeId, period])
  @@map("payslips")
}

// ============================================================================
// CRM MODULE - ENHANCED
// ============================================================================

enum ClientStatus {
  ACTIVE
  INACTIVE
  PROSPECT
  ARCHIVED
}

model Client {
  id                String                   @id @default(cuid())
  firmId            String
  name              String
  contactName       String?
  contactEmail      String?
  contactPhone      String?
  taxNumber         String?
  address           String?
  industry          String?
  tags              String[]
  status            ClientStatus             @default(PROSPECT)
  contractStartDate DateTime?
  contractEndDate   DateTime?
  notes             String?
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt

  firm               Firm                   @relation(fields: [firmId], references: [id], onDelete: Cascade)
  firmAssignments    ClientFirmAssignment[]
  assignedEmployees  Employee[]
  contracts          Contract[]
  transfers          EmployeeTransfer[]
  quarterlyReports   ClientQuarterlyReport[]

  @@map("clients")
}

model ClientFirmAssignment {
  id        String    @id @default(cuid())
  clientId  String
  firmId    String
  startDate DateTime
  endDate   DateTime?
  isActive  Boolean   @default(true)
  notes     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  firm   Firm   @relation(fields: [firmId], references: [id], onDelete: Cascade)

  @@unique([clientId, firmId])
  @@map("client_firm_assignments")
}

model ClientQuarterlyReport {
  id              String   @id @default(cuid())
  firmId          String
  clientId        String
  quarter         String
  year            Int
  quarterNumber   Int
  employeeCount   Int
  totalHours      Decimal? @db.Decimal(10, 2)
  totalCost       Decimal? @db.Decimal(10, 2)
  reportData      Json
  generatedAt     DateTime @default(now())
  generatedBy     String
  pdfUrl          String?
  excelUrl        String?
  sentAt          DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  firm      Firm   @relation(fields: [firmId], references: [id], onDelete: Cascade)
  client    Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  generator User   @relation(fields: [generatedBy], references: [id])

  @@unique([clientId, quarter])
  @@map("client_quarterly_reports")
}

// ============================================================================
// IPM (HEALTH INSURANCE) MODULE
// ============================================================================

enum PartnerType {
  PHARMACY
  HOSPITAL
  CLINIC
}

model Partner {
  id        String      @id @default(cuid())
  firmId    String
  type      PartnerType
  name      String
  slug      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  firm                Firm                           @relation(fields: [firmId], references: [id], onDelete: Cascade)
  branches            PartnerBranch[]
  agreements          PartnerAgreement[]
  preferredEnrollments EmployeeCoverageEnrollment[]
  claims              Claim[]

  @@unique([firmId, slug])
  @@map("partners")
}

model PartnerBranch {
  id        String   @id @default(cuid())
  partnerId String
  name      String
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  partner Partner @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@map("partner_branches")
}

model PartnerAgreement {
  id           String   @id @default(cuid())
  partnerId    String
  firmId       String
  tariffTable  Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  partner Partner @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  firm    Firm    @relation(fields: [firmId], references: [id], onDelete: Cascade)

  @@unique([partnerId, firmId])
  @@map("partner_agreements")
}

model BenefitPlan {
  id        String   @id @default(cuid())
  firmId    String
  name      String
  code      String
  coverage  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firm          Firm                           @relation(fields: [firmId], references: [id], onDelete: Cascade)
  enrollments   EmployeeCoverageEnrollment[]
  contributions Contribution[]

  @@unique([firmId, code])
  @@map("benefit_plans")
}

model EmployeeCoverageEnrollment {
  id                 String   @id @default(cuid())
  employeeId         String
  planId             String
  preferredPartnerId String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  employee        Employee     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  plan            BenefitPlan  @relation(fields: [planId], references: [id], onDelete: Cascade)
  preferredPartner Partner?     @relation(fields: [preferredPartnerId], references: [id])

  @@unique([employeeId, planId])
  @@map("employee_coverage_enrollments")
}

model Contribution {
  id         String   @id @default(cuid())
  firmId     String
  employeeId String
  planId     String
  period     String
  amount     Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  firm     Firm        @relation(fields: [firmId], references: [id], onDelete: Cascade)
  employee Employee    @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  plan     BenefitPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@map("contributions")
}

enum ClaimStatus {
  SUBMITTED
  REVIEWING
  APPROVED
  REJECTED
  PAID
}

model Claim {
  id            String      @id @default(cuid())
  firmId        String
  employeeId    String
  partnerId     String?
  amount        Decimal     @db.Decimal(10, 2)
  status        ClaimStatus @default(SUBMITTED)
  dateOfService DateTime
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  firm     Firm      @relation(fields: [firmId], references: [id], onDelete: Cascade)
  employee Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  partner  Partner?  @relation(fields: [partnerId], references: [id])

  @@map("claims")
}

// ============================================================================
// DOCUMENT MANAGEMENT - ENHANCED
// ============================================================================

enum DocumentType {
  CV
  ID_CARD
  PASSPORT
  CONTRACT
  PAYSLIP
  CERTIFICATE
  DIPLOMA
  MEDICAL_CERTIFICATE
  LEGAL_DOCUMENT
  MISSION_REPORT
  EXPENSE_RECEIPT
  OTHER
}

enum FileEntity {
  EMPLOYEE
  CLIENT
  CONTRACT
  MISSION
  LEAVE_REQUEST
  CLAIM
}

model FileObject {
  id           String       @id @default(cuid())
  firmId       String
  entity       FileEntity
  entityId     String
  documentType DocumentType
  fileName     String
  storageKey   String
  fileSize     Int?
  mimeType     String?
  uploadedBy   String
  description  String?
  expiryDate   DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  firm     Firm @relation(fields: [firmId], references: [id], onDelete: Cascade)
  uploader User @relation(fields: [uploadedBy], references: [id])

  @@map("file_objects")
}

// ============================================================================
// BI & AUDIT
// ============================================================================

model DashboardView {
  id        String   @id @default(cuid())
  firmId    String
  userId    String
  name      String
  config    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firm Firm @relation(fields: [firmId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("dashboard_views")
}

model AuditLog {
  id        String   @id @default(cuid())
  firmId    String?
  actorId   String
  action    String
  entity    String
  entityId  String
  metadata  Json?
  createdAt DateTime @default(now())

  firm  Firm? @relation(fields: [firmId], references: [id], onDelete: Cascade)
  actor User  @relation(fields: [actorId], references: [id])

  @@map("audit_logs")
}
